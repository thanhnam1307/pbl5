const Product = require("../models/Product");
const multer = require("multer");
const path = require("path");

// C·∫•u h√¨nh Multer ƒë·ªÉ upload ·∫£nh v√†o th∆∞ m·ª•c 'uploads'
const storage = multer.diskStorage({
  destination: "uploads/",
  filename: (req, file, cb) => {
    cb(null, Date.now() + path.extname(file.originalname)); // T·∫°o t√™n file ng·∫´u nhi√™n
  },
});
const upload = multer({ storage });

// üü¢ L·∫•y danh s√°ch s·∫£n ph·∫©m (Hi·ªÉn th·ªã c·∫£ category v√† spec)
exports.getAllProducts = async (req, res) => {
  try {
    const products = await Product.find()
      .populate("category", "name") // L·∫•y th√¥ng tin category (ch·ªâ name)
      .populate("spec", "details") // L·∫•y th√¥ng tin spec (ch·ªâ details)
      .exec();
    res.json(products);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// üü¢ L·∫•y chi ti·∫øt s·∫£n ph·∫©m theo ID
exports.getProductById = async (req, res) => {
  try {
    const product = await Product.findById(req.params.id)
      .populate("category", "name")
      .populate("spec", "details");
    if (!product) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });
    }
    res.json(product);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// üî¥ T·∫°o s·∫£n ph·∫©m (Ch·ªâ Admin)
exports.createProduct = async (req, res) => {
  try {
    // Ki·ªÉm tra n·∫øu c√≥ upload file ·∫£nh
    let imagePath = "";
    if (req.file) {
      imagePath = `/uploads/${req.file.filename}`;
    }

    // T·∫°o s·∫£n ph·∫©m m·ªõi
    const newProduct = new Product({ ...req.body, image: imagePath });
    await newProduct.save();
    res.status(201).json({ message: "S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c th√™m", newProduct });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// üî¥ C·∫≠p nh·∫≠t s·∫£n ph·∫©m (Ch·ªâ Admin)
exports.updateProduct = async (req, res) => {
  try {
    let updateData = { ...req.body };

    // N·∫øu c√≥ ·∫£nh m·ªõi, c·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n ·∫£nh
    if (req.file) {
      updateData.image = `/uploads/${req.file.filename}`;
    }

    const updatedProduct = await Product.findByIdAndUpdate(
      req.params.id,
      updateData,
      { new: true }
    );

    if (!updatedProduct) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });
    }

    res.json(updatedProduct);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// üî¥ X√≥a s·∫£n ph·∫©m (Ch·ªâ Admin)
exports.deleteProduct = async (req, res) => {
  try {
    const deletedProduct = await Product.findByIdAndDelete(req.params.id);

    if (!deletedProduct) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });
    }

    res.json({ message: "S·∫£n ph·∫©m ƒë√£ b·ªã x√≥a" });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// Middleware upload ·∫£nh
exports.uploadImage = upload.single("image");
